//@version=6
strategy("Trend + MACD + EMA + ADX + ATR-TS (static boxes, swing-range)",
     overlay            = true,
     pyramiding         = 0,
     default_qty_type   = strategy.percent_of_equity,
     default_qty_value  = 10,
     calc_on_every_tick = true,
     commission_type    = strategy.commission.percent,
     commission_value   = 0.01,
     initial_capital    = 10000)

// ──────────────────────────────────────────────────────────────────
//  INPUTS
// ──────────────────────────────────────────────────────────────────
trendLen    = input.int  (30 , "Pivot Length / Box Width", minval = 5)
showBoxes   = input.bool (true, "Draw Boxes?")
minSwingPct = input.float(0.1 , "Min Swing %", step = 0.1)

// MACD / EMA / ADX
fastLen    = input.int  (12 , "MACD Fast")
slowLen    = input.int  (26 , "MACD Slow")
sigLen     = input.int  ( 9 , "MACD Signal")
emaFastLen = input.int  (50 , "EMA Fast")
emaSlowLen = input.int  (200, "EMA Slow")
adxLen     = input.int  (14 , "ADX Length")
adxThr     = input.float(25 , "ADX Threshold")

// RISK / MONEY-MANAGEMENT
rr           = input.float(4.0, "Risk-Reward", step = 0.5)
slMode       = input.string("ATR", "SL Mode", options = ["ATR","Pivot-ATR","Fixed %"])
atrSLmult    = input.float(1.0, "ATR Mult",       step = 0.1)
fixedSLpct   = input.float(1.5, "Fixed SL %",     step = 0.1)
trailATRmult = input.float(1.0, "ATR-Trail Mult", step = 0.1)
sess         = input.session("0800-2200", "Active Session")

// Kolory boxów
cBoxUp = color.new(color.green, 80)
cBoxDn = color.new(color.red  , 80)

// ──────────────────────────────────────────────────────────────────
//  PIVOTS
// ──────────────────────────────────────────────────────────────────
ph = ta.pivothigh(high, trendLen, trendLen)
pl = ta.pivotlow (low , trendLen, trendLen)

pivotLowConfirmed  () => not na(pl[trendLen]) and  na(pl[trendLen + 1])
pivotHighConfirmed () => not na(ph[trendLen]) and  na(ph[trendLen + 1])

// ──────────────────────────────────────────────────────────────────
//  STATIC BOXES – rysowane tylko raz, gdy pivot zostanie potwierdzony
// ──────────────────────────────────────────────────────────────────
var box longBox  = na
var box shortBox = na

int   leftBar  = bar_index - trendLen      // liczymy co bar, aby TV nie ostrzegał
int   rightBar = bar_index
float swingHi  = ta.highest(high, trendLen + 1)
float swingLo  = ta.lowest (low , trendLen + 1)

// LONG swing
if showBoxes and pivotLowConfirmed()
    longBox := box.new(
         left   = leftBar,
         top    = swingHi,
         right  = rightBar,
         bottom = pl[trendLen],
         xloc   = xloc.bar_index,
         border_color = color.green,
         bgcolor      = cBoxUp,
         extend       = extend.none)

// SHORT swing
if showBoxes and pivotHighConfirmed()
    shortBox := box.new(
         left   = leftBar,
         top    = ph[trendLen],
         right  = rightBar,
         bottom = swingLo,
         xloc   = xloc.bar_index,
         border_color = color.red,
         bgcolor      = cBoxDn,
         extend       = extend.none)

// ──────────────────────────────────────────────────────────────────
//  INDIKATORY
// ──────────────────────────────────────────────────────────────────
[macd, macdSig, _] = ta.macd(close, fastLen, slowLen, sigLen)
emaFast = ta.ema(close, emaFastLen)
emaSlow = ta.ema(close, emaSlowLen)
[_, _, adxVal] = ta.dmi(adxLen, adxLen)
atr14 = ta.atr(14)

// rysowanie średnich na wykresie ceny
plot(emaFast, color=color.orange, title="EMA Fast")
plot(emaSlow, color=color.purple, title="EMA Slow")

// ──────────────────────────────────────────────────────────────────
//  FILTRY / SYGNAŁY
// ──────────────────────────────────────────────────────────────────
inSess = not na(time(timeframe.period, sess))

bullSwingOK = not na(pl[trendLen]) and
              ( swingHi - pl[trendLen] ) / pl[trendLen] * 100 >= minSwingPct

bearSwingOK = not na(ph[trendLen]) and
              ( ph[trendLen] - swingLo ) / ph[trendLen] * 100 >= minSwingPct

longCond  = inSess and bullSwingOK and macd > macdSig and emaFast > emaSlow and adxVal > adxThr
shortCond = inSess and bearSwingOK and macd < macdSig and emaFast < emaSlow and adxVal > adxThr
// ──────────────────────────────────────────────────────────────────
//  FUNKCJE: STOP-LOSS i TAKE-PROFIT
// ──────────────────────────────────────────────────────────────────
f_stop(isLong) =>
    float sl = na
    if isLong
        if slMode == "ATR"
            sl := low - atrSLmult * atr14
        else if slMode == "Pivot-ATR"
            sl := pl[trendLen] - atrSLmult * atr14
        else
            sl := close * (1 - fixedSLpct / 100)
    else
        if slMode == "ATR"
            sl := high + atrSLmult * atr14
        else if slMode == "Pivot-ATR"
            sl := ph[trendLen] + atrSLmult * atr14
        else
            sl := close * (1 + fixedSLpct / 100)
    sl

f_tp(isLong, sl) =>
    isLong ? close + rr * math.abs(close - sl)
           : close - rr * math.abs(sl   - close)

// ──────────────────────────────────────────────────────────────────
//  ZLECENIA
// ──────────────────────────────────────────────────────────────────
longSL  = f_stop(true)
shortSL = f_stop(false)

if longCond and strategy.position_size == 0
    float longTP = f_tp(true, longSL)
    strategy.entry("Long", strategy.long)
    strategy.exit ("XL", "Long",
                   stop = longSL,
                   limit = longTP,
                   trail_offset = trailATRmult * atr14)

if shortCond and strategy.position_size == 0
    float shortTP = f_tp(false, shortSL)
    strategy.entry("Short", strategy.short)
    strategy.exit ("XS", "Short",
                   stop = shortSL,
                   limit = shortTP,
                   trail_offset = trailATRmult * atr14)

// ──────────────────────────────────────────────────────────────────
//  KONIEC – dodatkowe ploty diagnostyczne (opcjonalne)
// ──────────────────────────────────────────────────────────────────
// plot(macd  , title="MACD" , color=color.teal   , display = display.none)
// plot(adxVal, title="ADX"  , color=color.yellow , display = display.none)
